rough_clues_sub = convert_col_to_list(regular_episode_sub_reindexed, "Question and Answer")
rough_clues = convert_col_to_list(regular_episodes_reindexed, 'Question and Answer')
clues = clean_text_clues(rough_clues_sub)

    tot_features = 1000
    n_topics = 13

    nmf = NMF(n_components=n_topics, random_state=43,
              alpha=0.1, l1_ratio=0.5, max_iter=1000)

    vectorizer = TfidfVectorizer(
                    ngram_range=(1, 2), strip_accents='ascii',
                    lowercase=True, tokenizer=None,  # put back to token_by_lemma for better
                    analyzer='word', stop_words=stop_words,
                    max_features=tot_features)

model = NMF_Model(text=rough_clues, factorizer=nmf, vectorizer=vectorizer, n_topics=n_topics)

In [5]: model.cluster_words(15)
Out[5]: 
[['called',
  'sometimes',
  'originally',
  'fish',
  'usually',
  'great',
  'theyre',
  'game',
  'water',
  'ancient',
  'blood',
  'little',
  'chinese',
  'thats',
  'sea'],
 ['war',
  'years',
  'american',
  'became',
  'south',
  'president',
  'great',
  'song',
  'old',
  'george',
  'largest',
  'british',
  'north',
  'born',
  'famous'],
 ['used',
  'meaning',
  'metal',
  'latin',
  'device',
  'element',
  'adjective',
  'water',
  'wood',
  'material',
  'plant',
  'phrase',
  'comes',
  'ancient',
  'gas'],
 ['named',
  'town',
  'century',
  'founded',
  'british',
  'university',
  'character',
  'county',
  'italian',
  'god',
  'greek',
  'area',
  'dog',
  'element',
  'style'],
 ['known',
  'better',
  'nickname',
  'hes',
  'language',
  'fish',
  'bird',
  'ancient',
  'artist',
  'german',
  'well',
  'italian',
  'century',
  'region',
  'species'],
 ['made',
  'debut',
  'famous',
  'material',
  'italian',
  'wood',
  'fruit',
  'water',
  'milk',
  'popular',
  'metal',
  'company',
  'originally',
  'meat',
  'cheese'],
 ['means',
  'latin',
  'whose',
  'meaning',
  'adjective',
  'verb',
  'comes',
  'phrase',
  'greek',
  'english',
  'something',
  'language',
  'italian',
  'way',
  'spanish'],
 ['john',
  'adams',
  'paul',
  'kennedy',
  'president',
  'pope',
  'st',
  'brown',
  'chief',
  'justice',
  'author',
  'henry',
  'poet',
  'son',
  'father'],
 ['film',
  'played',
  'tv',
  'star',
  'based',
  'movie',
  'oscar',
  'character',
  'role',
  'series',
  'play',
  'starred',
  'classic',
  'director',
  'james'],
 ['said',
  'youre',
  'god',
  'im',
  'dont',
  'something',
  'someone',
  'way',
  'asked',
  'jesus',
  'things',
  'love',
  'shall',
  'lord',
  'lincoln'],
 ['french',
  'de',
  'comes',
  'old',
  'meaning',
  'english',
  'language',
  'la',
  'revolution',
  'louis',
  'paris',
  'phrase',
  'official',
  'century',
  'dish'],
['king',
  'james',
  'henry',
  'queen',
  'stephen',
  'son',
  'england',
  'david',
  'george',
  'great',
  'louis',
  'charles',
  'richard',
  'arthur',
  'edward'],
 ['wrote',
  'author',
  'play',
  'love',
  'poet',
  'robert',
  'poem',
  'song',
  'william',
  'story',
  'composer',
  'opera',
  'music',
  'james',
  'novels']]
  
  
  
  ----------------------
  rough_clues_sub = convert_col_to_list(regular_episode_sub_reindexed, "Question and Answer")
rough_clues = convert_col_to_list(regular_episodes_reindexed, 'Question and Answer')
clues = clean_text_clues(rough_clues)

    tot_features = 1000
    n_topics = 13

    nmf = NMF(n_components=n_topics, random_state=43,
              alpha=0.1, l1_ratio=0.5, max_iter=1000)

    vectorizer = TfidfVectorizer(
                    ngram_range=(1, 2), strip_accents='ascii',
                    lowercase=True, tokenizer=None,  # put back to token_by_lemma for better
                    analyzer='word', stop_words=stop_words,
                    max_features=tot_features)

model = NMF_Model(text=rough_clues, factorizer=nmf, vectorizer=vectorizer, n_topics=n_topics)
 
 [['called',
  'sometimes',
  'originally',
  'fish',
  'usually',
  'great',
  'theyre',
  'game',
  'water',
  'ancient',
  'blood',
  'little',
  'chinese',
  'thats',
  'sea'],
 ['war',
  'years',
  'american',
  'became',
  'south',
  'president',
  'great',
  'song',
  'old',
  'george',
  'largest',
  'british',
  'north',
  'born',
  'famous'],
 ['used',
  'meaning',
  'metal',
  'latin',
  'device',
  'element',
  'adjective',
  'water',
  'wood',
  'material',
  'plant',
  'phrase',
  'comes',
  'ancient',
  'gas'],
 ['named',
  'town',
  'century',
  'founded',
  'british',
  'university',
  'character',
  'county',
  'italian',
  'god',
  'greek',
  'area',
  'dog',
  'element',
  'style'],
 ['known',
  'better',
  'nickname',
  'hes',
  'language',
  'fish',
  'bird',
  'ancient',
  'artist',
  'german',
  'well',
  'italian',
  'century',
  'region',
  'species'],
 ['made',
  'debut',
  'famous',
  'material',
  'italian',
  'wood',
  'fruit',
  'water',
  'milk',
  'popular',
  'metal',
  'company',
  'originally',
  'meat',
  'cheese'],
 ['means',
  'latin',
  'whose',
  'meaning',
  'adjective',
  'verb',
  'comes',
  'phrase',
  'greek',
  'english',
  'something',
  'language',
  'italian',
  'way',
  'spanish'],
 ['john',
  'adams',
  'paul',
  'kennedy',
  'president',
  'pope',
  'st',
  'brown',
  'chief',
  'justice',
  'author',
  'henry',
  'poet',
  'son',
  'father'],
 ['film',
  'played',
  'tv',
  'star',
  'based',
  'movie',
  'oscar',
  'character',
  'role',
  'series',
  'play',
  'starred',
  'classic',
  'director',
  'james'],
 ['said',
  'youre',
  'god',
  'im',
  'dont',
  'something',
  'someone',
  'way',
  'asked',
  'jesus',
  'things',
  'love',
  'shall',
  'lord',
  'lincoln'],
 ['french',
  'de',
  'comes',
  'old',
  'meaning',
  'english',
  'language',
  'la',
  'revolution',
  'louis',
  'paris',
  'phrase',
  'official',
  'century',
  'dish'],
 ['king',
  'james',
  'henry',
  'queen',
  'stephen',
  'son',
  'england',
  'david',
  'george',
  'great',
  'louis',
  'charles',
  'richard',
  'arthur',
  'edward'],
 ['wrote',
  'author',
  'play',
  'love',
  'poet',
  'robert',
  'poem',
  'song',
  'william',
  'story',
  'composer',
  'opera',
  'music',
  'james',
  'novels']]

------
  rough_clues_sub = convert_col_to_list(regular_episode_sub_reindexed, "Question and Answer")
rough_clues = convert_col_to_list(regular_episodes_reindexed, 'Question and Answer')
clues = clean_text_clues(rough_clues)

    tot_features = 1000
    n_topics = 13

    nmf = NMF(n_components=n_topics, random_state=43,
              alpha=0.1, l1_ratio=0.5, max_iter=1000)

    vectorizer = TfidfVectorizer(
                    ngram_range=(1, 2), strip_accents='ascii',
                    lowercase=True, tokenizer=None,  # put back to token_by_lemma for better
                    analyzer='word', stop_words=stop_words,
                    max_features=tot_features)

model = NMF_Model(text=clues, factorizer=nmf, vectorizer=vectorizer, n_topics=n_topics)


[['play',
  'character',
  'game',
  'movie',
  'role',
  'shakespeare',
  'series',
  'base',
  'team',
  'musical',
  'actress',
  'broadway',
  'night',
  'sitcom',
  'peter'],
 ['found',
  'university',
  'school',
  'college',
  'organization',
  'magazine',
  'national',
  'california',
  'party',
  'later',
  'church',
  'element',
  'body',
  'chain',
  'site'],
 ['film',
  'oscar',
  'base',
  'feature',
  'director',
  'direct',
  'role',
  'character',
  'robert',
  'classic',
  'debut',
  'story',
  'picture',
  'version',
  'disney'],
 ['john',
  'adam',
  'paul',
  'kennedy',
  'author',
  'pope',
  'poet',
  'brown',
  'brother',
  'henry',
  'chief',
  'death',
  'justice',
  'father',
  'british'],
 ['king',
  'james',
  'england',
  'henry',
  'queen',
  'stephen',
  'george',
  'louis',
  'david',
  'charles',
  'arthur',
  'great',
  'martin',
  'edward',
  'father'],
 ['french',
  'meaning',
  'language',
  'english',
  'century',
  'phrase',
  'louis',
  'revolution',
  'paris',
  'official',
  'dish',
  'refer',
  'france',
  'serve',
  'wine'],
 ['american',
  'south',
  'great',
  'north',
  'meaning',
  'latin',
  'little',
  'greek',
  'century',
  'british',
  'famous',
  'bird',
  'family',
  'author',
  'national'],
 ['star',
  'movie',
  'series',
  'flag',
  'born',
  'sitcom',
  'rock',
  'broadway',
  'musical',
  'night',
  'direct',
  'role',
  'child',
  'married',
  'actress'],
 ['song',
  'little',
  'line',
  'musical',
  'music',
  'blue',
  'theme',
  'hear',
  'feature',
  'movie',
  'band',
  'rock',
  'night',
  'album',
  'lady'],
 ['president',
  'george',
  'vice',
  'james',
  'serve',
  'washington',
  'born',
  'elect',
  'office',
  'former',
  'jefferson',
  'roosevelt',
  'lincoln',
  'bush',
  'johnson'],
 ['work',
  'author',
  'publish',
  'famous',
  'century',
  'artist',
  'tale',
  'base',
  'thomas',
  'composer',
  'james',
  'opera',
  'museum',
  'prize',
  'nobel'],
 ['company',
  'introduce',
  'product',
  'brand',
  'million',
  'stock',
  'general',
  'billion',
  'ford',
  'computer',
  'business',
  'symbol',
  'produce',
  'food',
  'founder'],
 ['love',
  'story',
  'fall',
  'singer',
  'sang',
  'greek',
  'cant',
  'shakespeare',
  'lost',
  'baby',
  'wife',
  'true',
  'poet',
  'goddess',
  'author']]

---------
rough_clues_sub = convert_col_to_list(regular_episode_sub_reindexed, "Question and Answer")
    rough_clues = convert_col_to_list(regular_episodes_reindexed, 'Question and Answer')
    clues = clean_text_clues(rough_clues)

    stop_words = make_stopwords("stopwords.txt")
    tot_features = 1000
    n_topics = 10
    n_features = None

    # Adjust the vectorizer and nmf model hyperparameters
    nmf = NMF(n_topics=200, random_state=43, max_iter=1000)

    vectorizer = TfidfVectorizer(
                    ngram_range=(1, 2), strip_accents='ascii',
                    lowercase=True, tokenizer=None,  # put back to token_by_lemma for better
                    analyzer='word', stop_words=stop_words,
                    max_features=1000)


    # # instantiate the class NMF_model
    model = NMF_Model(text=clues, factorizer=nmf, vectorizer=vectorizer, n_topics=n_topics)

WASN'T WORKING/ STOPS RUNNING 

------
    rough_clues_sub = convert_col_to_list(regular_episode_sub_reindexed, "Question and Answer")
    rough_clues = convert_col_to_list(regular_episodes_reindexed, 'Question and Answer')
    clues = clean_text_clues(rough_clues)

    stop_words = make_stopwords("stopwords.txt")
    tot_features = 1000
    n_topics = 10
    n_features=None

    # Adjust the vectorizer and nmf model hyperparameters
    nmf = NMF(n_components=n_topics, random_state=43, max_iter=1000)

    vectorizer = TfidfVectorizer(
                    ngram_range=(1, 2), strip_accents='ascii',
                    lowercase=True, tokenizer=None,  # put back to token_by_lemma for better
                    analyzer='word', stop_words=stop_words,
                    max_features=1000)


    # # instantiate the class NMF_model
    model = NMF_Model(text=clues, factorizer=nmf, vectorizer=vectorizer, n_topics=n_topics)
    model.vec_to_mat()
    
    
    
    [['play',
  'character',
  'game',
  'movie',
  'role',
  'shakespeare',
  'series',
  'base',
  'team',
  'musical',
  'actress',
  'broadway',
  'night',
  'sitcom',
  'wife'],
 ['american',
  'work',
  'south',
  'great',
  'meaning',
  'author',
  'latin',
  'greek',
  'famous',
  'century',
  'north',
  'company',
  'little',
  'place',
  'british'],
 ['film',
  'oscar',
  'base',
  'feature',
  'director',
  'direct',
  'role',
  'character',
  'robert',
  'classic',
  'debut',
  'story',
  'picture',
  'version',
  'james'],
 ['john',
  'adam',
  'paul',
  'kennedy',
  'author',
  'pope',
  'brown',
  'poet',
  'brother',
  'henry',
  'death',
  'chief',
  'justice',
  'father',
  'british'],
 ['king',
  'james',
  'england',
  'henry',
  'queen',
  'george',
  'stephen',
  'louis',
  'david',
  'charles',
  'arthur',
  'martin',
  'great',
  'edward',
  'father'],
 ['french',
  'meaning',
  'language',
  'english',
  'century',
  'phrase',
  'louis',
  'refer',
  'official',
  'revolution',
  'paris',
  'dish',
  'serve',
  'france',
  'german'],
 ['star',
  'movie',
  'series',
  'born',
  'flag',
  'rock',
  'sitcom',
  'musical',
  'broadway',
  'night',
  'child',
  'married',
  'role',
  'robert',
  'direct'],
 ['found',
  'company',
  'university',
  'school',
  'college',
  'magazine',
  'organization',
  'later',
  'california',
  'party',
  'national',
  'product',
  'element',
  'church',
  'brand'],
 ['song',
  'love',
  'line',
  'little',
  'movie',
  'musical',
  'music',
  'story',
  'singer',
  'night',
  'hear',
  'band',
  'rock',
  'blue',
  'feature'],
 ['president',
  'george',
  'vice',
  'james',
  'serve',
  'washington',
  'born',
  'elect',
  'office',
  'former',
  'jefferson',
  'roosevelt',
  'bush',
  'lincoln',
  'johnson']]

-------------------
n_topics = 13

[['play',
  'game',
  'character',
  'movie',
  'role',
  'shakespeare',
  'series',
  'base',
  'team',
  'musical',
  'actress',
  'night',
  'family',
  'broadway',
  'sitcom'],
 ['found',
  'university',
  'school',
  'college',
  'greek',
  'national',
  'body',
  'century',
  'water',
  'meaning',
  'magazine',
  'organization',
  'california',
  'animal',
  'ancient'],
 ['film',
  'oscar',
  'base',
  'feature',
  'director',
  'direct',
  'role',
  'character',
  'robert',
  'classic',
  'story',
  'debut',
  'picture',
  'james',
  'version'],
 ['john',
  'adam',
  'paul',
  'author',
  'kennedy',
  'pope',
  'poet',
  'brown',
  'british',
  'brother',
  'death',
  'henry',
  'chief',
  'father',
  'born'],
 ['king',
  'great',
  'england',
  'james',
  'queen',
  'henry',
  'george',
  'stephen',
  'louis',
  'david',
  'charles',
  'arthur',
  'century',
  'martin',
  'english'],
 ['french',
  'meaning',
  'language',
  'century',
  'english',
  'phrase',
  'refer',
  'latin',
  'little',
  'louis',
  'official',
  'german',
  'author',
  'paris',
  'france'],
 ['american',
  'south',
  'north',
  'great',
  'africa',
  'national',
  'bird',
  'native',
  'british',
  'latin',
  'mile',
  'family',
  'nation',
  'high',
  'african'],
 ['star',
  'movie',
  'series',
  'born',
  'flag',
  'rock',
  'sitcom',
  'musical',
  'night',
  'broadway',
  'child',
  'robert',
  'married',
  'james',
  'david'],
 ['song',
  'little',
  'line',
  'blue',
  'musical',
  'feature',
  'music',
  'rock',
  'movie',
  'hear',
  'night',
  'band',
  'theme',
  'lady',
  'album'],
 ['president',
  'george',
  'born',
  'james',
  'vice',
  'washington',
  'serve',
  'elect',
  'office',
  'former',
  'bush',
  'lincoln',
  'jefferson',
  'roosevelt',
  'general'],
 ['work',
  'author',
  'famous',
  'character',
  'century',
  'publish',
  'place',
  'greek',
  'james',
  'tale',
  'story',
  'base',
  'born',
  'thomas',
  'opera'],
 ['company',
  'introduce',
  'brand',
  'product',
  'line',
  'million',
  'british',
  'york',
  'famous',
  'general',
  'create',
  'food',
  'produce',
  'stock',
  'build'],
 ['love',
  'greek',
  'story',
  'letter',
  'meaning',
  'fall',
  'character',
  'author',
  'latin',
  'wife',
  'singer',
  'cant',
  'line',
  'sang',
  'baby']]
  
  ---------
  
  
n_components = 12
[['play',
  'game',
  'character',
  'movie',
  'role',
  'shakespeare',
  'series',
  'base',
  'team',
  'musical',
  'actress',
  'broadway',
  'sitcom',
  'night',
  'george'],
 ['found',
  'university',
  'school',
  'college',
  'national',
  'organization',
  'magazine',
  'california',
  'party',
  'later',
  'north',
  'body',
  'element',
  'church',
  'mexico'],
 ['film',
  'oscar',
  'base',
  'feature',
  'director',
  'direct',
  'role',
  'robert',
  'classic',
  'debut',
  'character',
  'picture',
  'story',
  'version',
  'actress'],
 ['john',
  'adam',
  'paul',
  'kennedy',
  'pope',
  'author',
  'brown',
  'poet',
  'brother',
  'henry',
  'chief',
  'british',
  'death',
  'justice',
  'father'],
 ['king',
  'england',
  'james',
  'henry',
  'queen',
  'george',
  'stephen',
  'louis',
  'david',
  'charles',
  'arthur',
  'martin',
  'edward',
  'france',
  'english'],
 ['french',
  'language',
  'english',
  'phrase',
  'louis',
  'century',
  'revolution',
  'official',
  'paris',
  'dish',
  'serve',
  'france',
  'refer',
  'german',
  'battle'],
 ['american',
  'south',
  'north',
  'native',
  'africa',
  'african',
  'carolina',
  'central',
  'nation',
  'british',
  'mile',
  'national',
  'indian',
  'pacific',
  'park'],
 ['star',
  'movie',
  'series',
  'flag',
  'born',
  'rock',
  'sitcom',
  'musical',
  'broadway',
  'night',
  'north',
  'married',
  'child',
  'role',
  'direct'],
 ['song',
  'love',
  'line',
  'movie',
  'musical',
  'music',
  'singer',
  'hear',
  'band',
  'feature',
  'theme',
  'night',
  'story',
  'album',
  'blue'],
 ['president',
  'george',
  'vice',
  'james',
  'washington',
  'serve',
  'born',
  'elect',
  'office',
  'former',
  'bush',
  'lincoln',
  'roosevelt',
  'jefferson',
  'general'],
 ['work',
  'meaning',
  'great',
  'little',
  'greek',
  'latin',
  'author',
  'character',
  'century',
  'famous',
  'letter',
  'place',
  'line',
  'family',
  'bird'],
 ['company',
  'introduce',
  'product',
  'brand',
  'million',
  'general',
  'british',
  'york',
  'stock',
  'ford',
  'food',
  'produce',
  'billion',
  'computer',
  'symbol']]


-------


clues = clean_text_clues(rough_clues)

    stop_words = make_stopwords("stopwords.txt")
    tot_features = 1000
    n_topics = 13
    n_features=None

    # Adjust the vectorizer and nmf model hyperparameters
    nmf = NMF(n_components=n_topics, init='nndsvd', random_state=43, max_iter=1000)

    vectorizer = TfidfVectorizer(
                    ngram_range=(1, 2), strip_accents='ascii',
                    lowercase=True, tokenizer=None,  # put back to token_by_lemma for better
                    analyzer='word', stop_words=stop_words,
                    max_features=1000)


    # # instantiate the class NMF_model
    model = NMF_Model(text=clues, factorizer=nmf, vectorizer=vectorizer, n_topics=n_topics)
    model.vec_to_mat()
    
    
   [['play',
  'game',
  'character',
  'movie',
  'role',
  'shakespeare',
  'series',
  'base',
  'team',
  'musical',
  'actress',
  'night',
  'family',
  'broadway',
  'sitcom'],
 ['found',
  'university',
  'school',
  'college',
  'greek',
  'national',
  'body',
  'century',
  'water',
  'meaning',
  'magazine',
  'organization',
  'california',
  'animal',
  'ancient'],
 ['film',
  'oscar',
  'base',
  'feature',
  'director',
  'direct',
  'role',
  'character',
  'robert',
  'classic',
  'story',
  'debut',
  'picture',
  'james',
  'version'],
 ['john',
  'adam',
  'paul',
  'author',
  'kennedy',
  'pope',
  'poet',
  'brown',
  'british',
  'brother',
  'death',
  'henry',
  'chief',
  'father',
  'born'],
 ['king',
  'great',
  'england',
  'james',
  'queen',
  'henry',
  'george',
  'stephen',
  'louis',
  'david',
  'charles',
  'arthur',
  'century',
  'martin',
  'english'],
 ['french',
  'meaning',
  'language',
  'century',
  'english',
  'phrase',
  'refer',
  'latin',
  'little',
  'louis',
  'official',
  'german',
  'author',
  'paris',
  'france'],
 ['american',
  'south',
  'north',
  'great',
  'africa',
  'national',
  'bird',
  'native',
  'british',
  'latin',
  'mile',
  'family',
  'nation',
  'high',
  'african'],
 ['star',
  'movie',
  'series',
  'born',
  'flag',
  'rock',
  'sitcom',
  'musical',
  'night',
  'broadway',
  'child',
  'robert',
  'married',
  'james',
  'david'],
 ['song',
  'little',
  'line',
  'blue',
  'musical',
  'feature',
  'music',
  'rock',
  'movie',
  'hear',
  'night',
  'band',
  'theme',
  'lady',
  'album'],
 ['president',
  'george',
  'born',
  'james',
  'vice',
  'washington',
  'serve',
  'elect',
  'office',
  'former',
  'bush',
  'lincoln',
  'jefferson',
  'roosevelt',
  'general'],
 ['work',
  'author',
  'famous',
  'character',
  'century',
  'publish',
  'place',
  'greek',
  'james',
  'tale',
  'story',
  'base',
  'born',
  'thomas',
  'opera'],
 ['company',
  'introduce',
  'brand',
  'product',
  'line',
  'million',
  'british',
  'york',
  'famous',
  'general',
  'create',
  'food',
  'produce',
  'stock',
  'build'],
 ['love',
  'greek',
  'story',
  'letter',
  'meaning',
  'fall',
  'character',
  'author',
  'latin',
  'wife',
  'singer',
  'cant',
  'line',
  'sang',
  'baby']]

------
 clues = clean_text_clues(rough_clues)

    stop_words = make_stopwords("stopwords.txt")
    tot_features = 1000
    n_topics = 10
    n_features=None

    # Adjust the vectorizer and nmf model hyperparameters
    nmf = NMF(n_components=n_topics, init='nndsvd', random_state=43, max_iter=1000)

    vectorizer = TfidfVectorizer(
                    ngram_range=(1, 2), strip_accents='ascii',
                    lowercase=True, tokenizer=None,  # put back to token_by_lemma for better
                    analyzer='word', stop_words=stop_words,
                    max_features=1000)


    # # instantiate the class NMF_model
    model = NMF_Model(text=clues, factorizer=nmf, vectorizer=vectorizer, n_topics=n_topics)
    model.vec_to_mat()
    
[['play',
  'character',
  'game',
  'movie',
  'role',
  'shakespeare',
  'series',
  'base',
  'team',
  'musical',
  'actress',
  'broadway',
  'night',
  'sitcom',
  'wife'],
 ['american',
  'work',
  'south',
  'great',
  'meaning',
  'author',
  'latin',
  'greek',
  'famous',
  'century',
  'north',
  'company',
  'little',
  'place',
  'british'],
 ['film',
  'oscar',
  'base',
  'feature',
  'director',
  'direct',
  'role',
  'character',
  'robert',
  'classic',
  'debut',
  'story',
  'picture',
  'version',
  'james'],
 ['john',
  'adam',
  'paul',
  'kennedy',
  'author',
  'pope',
  'brown',
  'poet',
  'brother',
  'henry',
  'death',
  'chief',
  'justice',
  'father',
  'british'],
 ['king',
  'james',
  'england',
  'henry',
  'queen',
  'george',
  'stephen',
  'louis',
  'david',
  'charles',
  'arthur',
  'martin',
  'great',
  'edward',
  'father'],
 ['french',
  'meaning',
  'language',
  'english',
  'century',
  'phrase',
  'louis',
  'refer',
  'official',
  'revolution',
  'paris',
  'dish',
  'serve',
  'france',
  'german'],
 ['star',
  'movie',
  'series',
  'born',
  'flag',
  'rock',
  'sitcom',
  'musical',
  'broadway',
  'night',
  'child',
  'married',
  'role',
  'robert',
  'direct'],
 ['found',
  'company',
  'university',
  'school',
  'college',
  'magazine',
  'organization',
  'later',
  'california',
  'party',
  'national',
  'product',
  'element',
  'church',
  'brand'],
 ['song',
  'love',
  'line',
  'little',
  'movie',
  'musical',
  'music',
  'story',
  'singer',
  'night',
  'hear',
  'band',
  'rock',
  'blue',
  'feature'],
 ['president',
  'george',
  'vice',
  'james',
  'serve',
  'washington',
  'born',
  'elect',
  'office',
  'former',
  'jefferson',
  'roosevelt',
  'bush',
  'lincoln',
  'johnson']]
  
  
  
  ------
rough_clues = convert_col_to_list(regular_episodes_reindexed,
                                      'Question and Answer')
    clues = clean_text_clues(rough_clues)
        **CLEAN TEXT CLUES FUNCTION DID NOT HAVE REMOVE_NON_WORDNET(CLUE) AS A FUNCT

    stop_words = make_stopwords("stopwords.txt")
    tot_features = 1000
    n_topics = 13
    n_top_words = 10

    # Adjust the vectorizer and nmf model hyperparameters
    nmf = NMF(n_components=n_topics, init='nndsvd', random_state=43,
              max_iter=1000)

    vectorizer = TfidfVectorizer(
                    ngram_range=(1, 2), strip_accents='ascii',
                    lowercase=True, tokenizer=None,
                    analyzer='word', stop_words=stop_words,
                    max_features=1000)

    # # instantiate the class NMF_model
    model = NMF_Model(text=clues, factorizer=nmf, vectorizer=vectorizer, n_topics=n_topics)
    model.vec_to_mat()



[['play',
  'game',
  'character',
  'movie',
  'role',
  'shakespeare',
  'series',
  'base',
  'team',
  'actress',
  'musical',
  'broadway',
  'sitcom',
  'night',
  'george'],
 ['john',
  'adam',
  'paul',
  'kennedy',
  'pope',
  'author',
  'brown',
  'poet',
  'chief',
  'brother',
  'death',
  'henry',
  'british',
  'justice',
  'father'],
 ['island',
  'mile',
  'nation',
  'pacific',
  'south',
  'west',
  'north',
  'coast',
  'hawaii',
  'british',
  'area',
  'point',
  'east',
  'ocean',
  'separate'],
 ['film',
  'oscar',
  'base',
  'feature',
  'director',
  'role',
  'direct',
  'robert',
  'classic',
  'debut',
  'character',
  'picture',
  'story',
  'version',
  'disney'],
 ['found',
  'university',
  'school',
  'college',
  'national',
  'organization',
  'magazine',
  'party',
  'california',
  'later',
  'north',
  'africa',
  'mexico',
  'church',
  'element'],
 ['king',
  'james',
  'england',
  'henry',
  'queen',
  'george',
  'stephen',
  'louis',
  'david',
  'charles',
  'arthur',
  'martin',
  'richard',
  'edward',
  'france'],
 ['american',
  'south',
  'north',
  'native',
  'africa',
  'african',
  'central',
  'carolina',
  'british',
  'nation',
  'indian',
  'national',
  'mile',
  'border',
  'park'],
 ['french',
  'language',
  'english',
  'louis',
  'revolution',
  'phrase',
  'paris',
  'official',
  'century',
  'france',
  'dish',
  'serve',
  'refer',
  'meaning',
  'german'],
 ['star',
  'movie',
  'series',
  'flag',
  'born',
  'rock',
  'sitcom',
  'musical',
  'broadway',
  'married',
  'night',
  'north',
  'child',
  'role',
  'direct'],
 ['song',
  'love',
  'dont',
  'line',
  'movie',
  'musical',
  'music',
  'singer',
  'theme',
  'band',
  'hear',
  'night',
  'feature',
  'album',
  'sang'],
 ['president',
  'george',
  'vice',
  'james',
  'serve',
  'washington',
  'born',
  'william',
  'elect',
  'office',
  'former',
  'jefferson',
  'bush',
  'roosevelt',
  'lincoln'],
 ['work',
  'great',
  'meaning',
  'little',
  'greek',
  'latin',
  'author',
  'century',
  'character',
  'famous',
  'letter',
  'place',
  'line',
  'family',
  'bird'],
 ['company',
  'introduce',
  'product',
  'brand',
  'million',
  'general',
  'british',
  'york',
  'stock',
  'since',
  'food',
  'ford',
  'produce',
  'billion',
  'computer']]


